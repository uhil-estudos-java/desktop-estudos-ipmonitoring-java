/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.ip.monitoring.monitor;

import br.com.ip.monitoring.config.Configuracoes;
import br.com.ip.monitoring.getIp.PegandoIps;
import br.com.ip.monitoring.mail.SendMail;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author uhitlei.barbosa
 */
public class Monitor extends javax.swing.JFrame {

  Configuracoes config;
  ResourceBundle sourceConfig;
  Properties confProp;

  /**
   * Creates new form Monitor
   */
  public Monitor() {
    initComponents();
    confProp = new Properties();
    config = new Configuracoes();
    this.setResizable(false);
    this.setLocationRelativeTo(null);
    this.setVisible(true);

    if (CheckConfig(confProp)) {
      // StartMonitoring();
      shoudleTime();
    } else {
      getConfig();
    }


  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("IP Monitoring");
    setIconImage(new javax.swing.ImageIcon(getClass().getResource("/br/com/ip/monitoring/images/log_trunixSmallNoname.png")).getImage());
    setResizable(false);

    jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ip/monitoring/images/radar.gif"))); // NOI18N
    jLabel1.setToolTipText("Click para abrir as configurações");
    jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        jLabel1MouseClicked(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
    config.show();
    this.dispose();
  }//GEN-LAST:event_jLabel1MouseClicked

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(Monitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(Monitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(Monitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(Monitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new Monitor();//.setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  // End of variables declaration//GEN-END:variables

  private boolean CheckConfig(Properties sConf) {
    try {
      FileInputStream fi = new FileInputStream("config.properties");
      sConf = new Properties();
      sConf.load(fi);
      this.confProp = sConf;
      if (sConf.getProperty("mail.config").equalsIgnoreCase("true")) {
        return true;
      }
      return false;
    } catch (IOException ex) {
      Logger.getLogger(Monitor.class.getName()).log(Level.SEVERE, null, ex);
      return false;
    }

  }

  private void shoudleTime() {
    //valores default de intervalos
    int tempo = 0;
    if (CheckConfig(confProp)) {
      tempo = Integer.parseInt(confProp.getProperty("mail.tempoMin"));
    }
    int intervalo = 1; // 1 mim

    if (tempo > 0) {
      intervalo *= tempo;
    }

    Timer timer = new Timer();
    TimerTask tarefa = new TimerTask() {
      public void run() {
        try {
          StartMonitoring();
          //chamar metodo
        } catch (Exception e) {
          e.printStackTrace();
        }
      }
    };
    // timer.schedule(tarefa,new Date(), 60000 * intervalo);
    timer.schedule(tarefa, new Date(), 60000 * intervalo);


  }

  private void StartMonitoring() {
    String ip = new PegandoIps().getIp();
    if (!confProp.getProperty("mail.ultimoIP").equalsIgnoreCase(ip)) {
      updateConfig(confProp, "mail.ultimoIP", new PegandoIps().getIp());
      new SendMail().sendMailRBoundle("Novo Ip: " + ip, confProp);
      System.out.println("IMPRIMIU!" + ip + " " + new Date());
    }
  }

  private void getConfig() {
    config.setVisible(true);
    if (this.isVisible()) {
      this.dispose();
    }
    this.dispose();
  }

  private void updateConfig(Properties prop, String property, String valor) {
    FileOutputStream foXml = null;
    FileOutputStream fo = null;
    File proFile = null;
    File proFileXML = null;

    try {
      proFile = new File("config.properties");
      proFileXML = new File("config.xml");
      fo = new FileOutputStream(proFile);
      foXml = new FileOutputStream(proFileXML);

      prop.setProperty(property, valor);

      prop.store(fo, new SimpleDateFormat("dd/MM/yyyy - hh:mm:ss").format(new Date()).toString());
      prop.storeToXML(foXml, new SimpleDateFormat("dd/MM/yyyy - hh:mm:ss").format(new Date()).toString() + " Configuração de email.");

      CheckConfig(prop);

    } catch (FileNotFoundException ex) {
      Logger.getLogger(Configuracoes.class.getName()).log(Level.SEVERE, null, ex);

    } catch (IOException ex) {
      Logger.getLogger(Configuracoes.class.getName()).log(Level.SEVERE, null, ex);

    } finally {
      try {
        foXml.close();
        fo.close();


      } catch (IOException ex) {
        Logger.getLogger(Configuracoes.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
  }
}
